7
Справочная информация 
Во время набора программы можно получить справку о конструкции языка, типе данных, процедуре или функции. Быстро получить доступ к нужному разделу справочной информации можно, набрав в окне редактора кода ключевое слово и нажав клавишу <F1>. Например, чтобы получить справку о функции FloatToStrF, надо в окне редактора кода набрать ее имя и нажать клавишу <F1>. 
Иногда описанный способ доступа к справочной информации не дает результата (например, если неправильно указано имя функции). В этом случае надо в меню Help выбрать команду Delphi Help, затем в появившемся окне отображения справочной информации выбрать вкладку Index и в поле Look for ввести ключевое слово (или несколько первых букв слова). В результате будет сформирован список разделов, связанных с введенным словом. 
Сохранение проекта 
Проект — это набор файлов, используя которые, компилятор создает exe-файл. В простейшем случае проект образуют: файл описания проекта (dproj-файл), главный модуль (dpr-файл), файл описания формы (dfm-файл), модуль формы (pasфайл) и файл ресурсов (res-файл). 
   
Чтобы сохранить проект, нужно в меню File выбрать команду Save Project As. 
Если проект еще ни разу не был сохранен, то сначала на экране появляется окно Save Unit As. В этом окне (рис. 2.26) надо выбрать папку, предназначенную для проектов Delphi (по умолчанию это C:\Users\UserName\Documents\RAD Studio\Projects, где UserName — имя пользователя в системе), создать в ней папку для сохраняемого проекта, открыть созданную папку и в поле Имя файла ввести имя модуля (обычно в качестве имени модуля указывают имя формы, например MainForm) и нажать кнопку Сохранить. Затем в появившемся окне Save Project As (рис. 2.27) надо ввести имя проекта. Обратите внимание на то, что имя проекта определяет имя exe-файла, который будет создан компилятором. 
Структура проекта 
Как уже говорилось, проект представляет собой совокупность файлов, которые используются компилятором для генерации выполняемого файла. Основу проекта образуют файл главного модуля (dpr-файл) и один или несколько модулей (для каждой формы Delphi создает отдельный модуль — pas-файл). Помимо файла проекта и модулей в процессе компиляции используются: файл ресурсов (res-файл), файлы описания форм (отдельный dfm-файл для каждой формы), а также файл конфигурации (cfg-файл). Общая информация о проекте хранится в dproj-файле. 
Файл главного модуля (чтобы его увидеть, надо в меню Project выбрать команду View Source) содержит инструкции, обеспечивающие инициализацию приложения. 
В качестве примера в листинге 2.3 приведен главный модуль приложения "Конвертер". 
Листинг 2.3. Главный модуль приложения "Конвертер" (converter.dpr) 
program converter; 
 uses 
  Forms, 
  Unit1 in 'Unit1.pas' {Form1}; 
 
{$R *.res} 
 begin 
  Application.Initialize; 
  Application.CreateForm(TForm1, Form1);   Application.Run; end. 
Начинается файл проекта директивой program, в которой указывается имя приложения. Далее, за директивой uses, следуют имена модулей, необходимых для создания выполняемого файла: библиотечного модуля Forms и модуля unit1 — стартовой формы. 
Строка {$R *.res} — это директива компилятору подключить файл ресурсов. В файле ресурсов находится значок приложения. Звездочка показывает, что имя файла ресурсов такое же, как и у файла проекта. Инструкции между begin и end обеспечивают инициализацию приложения (создание объекта Application), создание стартовой формы (объекта Form1) и запуск приложения (метод Run). 
Модули содержат объявления типов, констант, переменных, процедур и функций. В качестве примера в листинге 2.4 приведен модуль стартовой формы программы "Конвертер". Этот модуль содержит объявление класса TForm1. Обратите внимание, что инструкция Application.CreateForm(TForm1, Form1), которая находится в файле проекта (см. листинг 2.3), создает объект класса TForm1, т. е. стартовую форму приложения "Конвертер". 
Листинг 2.4. Модуль стартовой формы программы "Конвертер" (unit1.pas) 
unit Unit1; 
 interface  uses 
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, 
  Forms, Dialogs, StdCtrls; 
 type 
  TForm1 = class(TForm) 
    Edit1: TEdit; 
    Edit2: TEdit; 
    Label1: TLabel; 
    Label2: TLabel; 
    Label3: TLabel; 
    Button1: TButton;     Button2: TButton; 
  procedure Button1Click(Sender: TObject);   procedure Button2Click(Sender: TObject);   private 
    { Private declarations }   public 
    { Public declarations }   end; 
var 
  Form1: TForm1; 
 implementation  
{$R *.dfm} 
 
procedure TForm1.Button1Click(Sender: TObject); var 
  usd: real; // цена в долларах   k: real;   // курс   rub: real; // цена в рублях begin 
  // получить данные из полей редактирования   k := StrToFloat(Edit1.Text);   usd := StrToFloat(Edit2.Text); 
 
  // пересчитать цену из долларов в рубли   rub := usd * k; 
 
  // вывести результат расчета в поле Label3 
  Label3.Caption := FloatToStr(usd) + ' $ = ' +                     FloatToStr(rub) + ' руб.'; end;  
procedure TForm1.Button2Click(Sender: TObject); begin 
  Form1.Close; // закрыть окно end;  end. 
Начинается модуль словом unit, за которым указано имя модуля. Именно это имя упоминается в списке используемых модулей в инструкции uses файла проекта. 
Модуль состоит из следующих разделов: интерфейса, реализации и инициализации. 
В разделе интерфейса (начинается словом interface) находятся объявления класса TForm1 и объекта Form1. Таким образом, модуль, который использует модуль unit1, может создать форму Form1 (окно Конвертер). 
Раздел реализации открывается словом implementation. Директива {$R *.dfm} указывает компилятору, что описание формы, сформированное Delphi в процессе ее создания, находится в файле unit1.dfm. Далее следует описание методов класса TForm1 (процедуры Button1Click и Button2Click являются методами). 
Следует отметить, что модуль проекта (dpr-файл), файл описания формы (dfmфайл), файл ресурсов (res-файл), а также значительное количество инструкций модуля формы (pas-файл) формирует Delphi. 
