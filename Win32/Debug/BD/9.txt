9
Исключения 
Ошибки, возникающие во время работы программы, называют исключениями. В большинстве случаев причиной исключений являются неверные данные. Например, если в поле Курс программы "Конвертер" ввести строку 30.09 и сделать щелчок на кнопке Пересчет, то на экране появится сообщение (рис. 2.32): '30.09' is not valid floating point value (30.09 не является дробным числом). 
  
Причина возникновения исключения описанной ошибки в следующем. Преобразование строки, введенной в поле редактирования, в число выполняет функция StrToFloat. Эта функция работает правильно, если ее параметром является строковое представление дробного числа, что при стандартной для России настройке Windows предполагает использование в качестве десятичного разделителя запятой. В рассматриваемом примере строка 30.09 не является строковым представлением дробного числа, поэтому и возникает исключение. 
Если программа запущена из среды разработки в режиме отладки (команда Run из меню Run), то при возникновении исключения выполнение программы приостанавливается и на экране появляется окно Debugger Exception Notification, в котором, помимо сообщения об ошибке, указывается тип исключения (рис. 2.33). Щелчок на кнопке Break приостанавливает выполнение программы в реальном времени и переводит ее в режим выполнения по шагам (при этом в окне редактора кода выделяется инструкция, при выполнении которой произошла ошибка). Щелчок на кнопке Continue запускает программу с той точки, в которой была приостановлена ее работа. 
  
Для того чтобы остановить программу, во время работы которой возникло исключение, надо в меню Run выбрать команду Program Reset. 
Обработка исключения 
Обработку исключений берет на себя автоматически добавляемый в выполняемую программу код, который обеспечивает вывод сообщения об ошибке и завершение процедуры, при выполнении которой возникло исключение. Вместе с тем программист может поместить в программу код, который выполнит обработку исключения. 
Инструкция обработки исключения в общем виде выглядит так: 
try 
  // здесь инструкции, при выполнении которых может 
  // произойти исключение except   on Исключение do      begin 
       // здесь инструкции обработки исключения      end; end; 
Ключевое слово try указывает, что далее следуют инструкции, при выполнении которых возможно возникновение исключений, и что обработку этих исключений берет на себя программа. Слово except обозначает начало секции обработки исключений. После слова on указывается исключение, обработку которого берет на себя программа, а после do — инструкции, обеспечивающие обработку исключения. Нужно обратить внимание, что инструкции, следующие за той, при выполнении которой возникло исключение, после обработки исключения не выполняются. 
В табл. 2.12 перечислены часто возникающие исключения и указаны причины, которые могут привести к их возникновению. 
Таблица 2.12. Типичные исключения 
Тип исключения 	Возникает 
EConvertError 	При выполнении преобразования строки в число, если преобразуемая величина не может быть приведена к требуемому виду. Чаще всего возникает при преобразовании строки в дробное число, если в качестве разделителя целой и дробной частей указан неверный символ 
EZeroDivide  	Деление на ноль. При выполнении операции деления, если делитель равен нулю (если и делитель, и делимое равны нулю, то возникает исключение EInvalidOp) 
EFOpenError 	При обращении к файлу, например при попытке загрузить файл иллюстрации с помощью метода LoadFromFile. Наиболее частой причиной является отсутствие требуемого файла или, в случае использования сменного диска, отсутствие диска в накопителе 
EInOutError 	При обращении к файлу, например при попытке открыть для чтения несуществующий файл 
EOLEException 	При выполнении операций с базой данных, например при попытке открыть несуществующую базу данных, если для доступа к базе данных используются ADO-компоненты (чтобы иметь возможность обработки этого исключения, в директиву uses надо добавить ссылку на модуль ComObj) 
 
В качестве примера использования инструкции try в листинге 2.5 приведена процедура обработки события Click на кнопке Пересчет окна программы "Конвертер". При возникновении исключения EConvertError программа определяет причину (незаполненное поле или неверный формат данных) и выводит соответствующее сообщение (рис. 2.34). 
Листинг 2.5. Щелчок на кнопке Пересчет (c обработкой исключения) 
procedure TForm1.Button1Click(Sender: TObject); var 
  usd: real;   // цена в долларах 
  k:   real;   // курс   rub: real;   // цена в рублях 
 begin   try 
    // получить данные из полей редактирования     k := StrToFloat(Edit1.Text);     usd := StrToFloat(Edit2.Text); 
 
    // пересчитать цену из долларов в рубли     rub := usd * k; 
    // вывести результат расчета в поле Label4 
    Label3.Caption := FloatToStr(usd) + '$ = ' +                       FloatToStr(rub) + 'руб.';   except 
    if (Length(Edit1.Text) = 0) or (Length(Edit2.Text)=0) then         MessageDlg('Надо ввести данные в оба поля',                     mtWarning,[mbOk],0)     else 
        MessageDlg('При вводе дробных чисел используйте запятую',                     mtError,[mbOk],0);   end; end; 
  
Рис. 2.34. Пример сообщения об ошибке (диалог MessageDlg) 
В приведенной процедуре обработки события Click для вывода сообщения о неверных данных используется функция MessageDld, инструкция вызова которой в общем виде выглядит так: r := MessageDlg(Сообщение, Тип, Кнопки, РазделСправки) где: 
	Сообщение — текст сообщения; 
	Тип — тип сообщения. Сообщение может быть информационным (mtInformation), предупреждающим (mtWarning) или сообщением об ошибке (mtError). Каждому типу сообщения соответствует значок (табл. 2.13); 
	Кнопки — список кнопок, отображаемых в окне сообщения (табл. 2.14); 
	РазделСправки — идентификатор раздела справочной информации, который появится на экране, если пользователь нажмет клавишу <F1>. Если вывод справки не предусмотрен, то в качестве параметра следует указать ноль. 
Значение, возвращаемое функцией MessageDlg (табл. 2.15), позволяет определить, какая кнопка была нажата пользователем для завершения диалога. Если в окне сообщения отображается одна кнопка (очевидно, что в этом случае не нужно проверять, какую кнопку нажал пользователь), то функцию MessageDld можно вызвать как процедуру. 
Таблица 2.13. Сообщения 
Сообщение 	Тип сообщения  	Значок 
Warning (Внимание) 	mtWarning 	  
Error (Ошибка) 	mtError 	  
Information (Информация) 	mtInformation 	  
Confirmation (Подтверждение) 	mtConfirmation 	  
 
Таблица 2.14. Идентификаторы кнопок 
Идентификатор 	Кнопка 
mbYes 	Yes 
mbNo 	No 
mbOK 	OK 
mbCancel 	Cancel 
mbHelp 	Help 
 
Таблица 2.15. Значения функции MessageDlg 
Значение 	Диалог завершен нажатием кнопки 
mrYes 	Yes 
mrOk 	Ok 
mrNo 	No 
mrCancel 	Cancel 
Для вывода сообщения вместо функции MessageDlg можно использовать процедуру ShowMessage. Эта процедура выводит окно с сообщением и кнопкой OK. На рис. 2.35 приведен пример окна сообщения — результат выполнения инструкции ShowMessage('Надо ввести данные в оба поля'). 
  
Рис. 2.35. Сообщение, выведенное процедурой ShowMessage 
Обратите внимание, что в заголовке окна отображается имя приложения, указанное на вкладке Application окна Project Options (окно становится доступным в результате выбора в меню Project команды Options) или, если имя приложения не задано, имя проекта. 
Внесение изменений 
Программу "Конвертер" можно усовершенствовать. Например, сделать так, чтобы в поля редактирования пользователь мог ввести только правильную информацию, и чтобы в результате нажатия клавиши <Enter> в поле Курс курсор переходил в поле Цена, а при нажатии этой же клавиши в поле Цена становилась активной кнопка Пересчет. Можно сделать так, чтобы кнопка Пересчет была доступной только в том случае, если данные есть в обоих полях редактирования. 
Чтобы внести изменения в программу, нужно открыть соответствующий проект. Сделать это можно обычным способом, выбрав в меню File команду Open Project. Можно выбрать нужный проект из списка проектов, над которыми в последнее время работал программист. Этот список становится доступным в результате выбора в меню File команды Reopen. 
Чтобы программа "Конвертер" работала так, как было описано ранее, надо создать процедуры обработки событий KeyPress и Change для полей редактирования (компонентов Edit1 и Edit2). Процедура обработки события KeyPress (для каждого компонента своя) обеспечивает фильтрацию вводимых пользователем символов. Она проверяет символ нажатой клавиши (символ передается в процедуру обработки события через параметр Key) и, если символ "запрещен", заменяет его на так называемый нуль-символ (в результате запрещенный символ в поле редактирования не отображается). Процедура обработки события Change (событие возникает, если текст, находящийся в поле редактирования, изменился, например в результате нажатия какой-либо клавиши в поле редактирования) управляет доступностью кнопки Пересчет. Она проверяет, есть ли данные в полях редактирования, и, если в каком-либо из полей данных нет, присваивает свойству Enabled кнопки Button1 значение False и тем самым делает кнопку недоступной. Следует обратить внимание, что действие, которое надо выполнить, если изменилось содержимое поля Edit1, ничем не отличается от действия, которое надо выполнить, если изменилось содержимое поля Edit2. Поэтому обработку события Change для обоих компонентов выполняет одна процедура. Чтобы одна процедура могла обрабатывать события разных компонентов, сначала надо создать процедуру обработки события для одного компонента, а затем указать имя этой процедуры в качестве имени процедуры обработки события другого компонента. 
В листинге 2.6 приведен модуль главной формы усовершенствованной программы "Конвертер". Обратите внимание, что в процедуре обработки события Click кнопки Пересчет нет инструкций обработки исключений. Исключения не могут возникнуть, т. к. пользователь просто не сможет ввести в поля редактирования неверные данные. 
Листинг 2.6. Модуль главной формы программы "Конвертер" (usd2rub.pas) 
// нажатие клавиши в поле Курс 
procedure TForm1.Edit1KeyPress(Sender: TObject; var Key: Char); begin   case Key of 
    '0'..'9', #8: ;  // цифры и <Backspace> 
 
       { Обработку десятичного разделителя сделаем "интеллектуальной". 
         Заменим разделитель (точку или запятую) символом          DecimalSeparator, который должен          использоваться при записи дробных чисел }     '.',',':       begin 
        Key := DecimalSeparator; 
        // проверим, введен ли уже в поле Edit десятичный разделитель         if pos(DecimalSeparator,Edit1.Text) <> 0           then Key := #0;       end; 
    #13: Edit2.SetFocus;   // <Enter> — курсор в поле Edit2     else Key := #0;        // остальные символы запрещены   end; end; 
 
// нажатие клавиши в поле Цена 
procedure TForm1.Edit2KeyPress(Sender: TObject; var Key: Char); 
begin   case Key of 
    '0'..'9', #8: ;  // цифры и <Backspace>     '.',',':       begin 
        Key := DecimalSeparator; 
        // проверим, введен ли уже в поле Edit десятичный разделитель         if pos(DecimalSeparator,Edit1.Text) <> 0           then Key := #0;       end; 
    #13: Button1.SetFocus; // сделать активной кнопку Пересчет     else Key := Char(0);   // остальные символы запрещены   end; end; 
 
// текст, находящийся в поле редактирования, изменился procedure TForm1.EditChange(Sender: TObject); begin 
  // проверим, есть ли данные в полях редактирования   if (Length(Edit1.Text) = 0) or (Length(Edit1.Text) = 0)     then Button1.Enabled := False   // кнопка Пересчет недоступна     else Button1.Enabled := True;   // кнопка Пересчет доступна end; 
 
// щелчок на кнопке Пересчет 
procedure TForm1.Button1Click(Sender: TObject); var 
  usd: real;   // цена в долларах   k:   real;   // курс   rub: real;   // цена в рублях 
 begin 
  // получить данные из полей редактирования   k := StrToFloat(Edit1.Text);   usd := StrToFloat(Edit2.Text); 
 
  // пересчитать цену из долларов в рубли   rub := usd * k; 
  // вывести результат расчета в поле Label3 
  Label3.Caption := FloatToStrF(usd, ffNumber, 6,2) + ' $ = ' +                     FloatToStrF(rub,ffCurrency,6,2); end; 
// щелчок на кнопке Завершить 
procedure TForm1.Button2Click(Sender: TObject); begin 
  Form1.Close; // закрыть окно end; 
