           Никита Культин
           Санкт-Петербург  «БХВ-Петербург»  2011
     УДК 	681.3.068+800.92Delphi XE  ББК 	32.973.26-018.1
        	К90   	Культин Н. Б.
             К90 	Основы программирования в Delphi XE.
             — СПб.: БХВ-Петербург, 2011. — 416 с.:  ил. + CD-ROM — (Самоучитель)  ISBN 978-5-9775-0683-0
             Книга является пособием для начинающих по программированию в Delphi. В ней в доступной форме изложены принципы визуального проектирования и событийного программирования, на конкретных примерах показана методика создания программ различного назначения, приведено описание среды разработки Delphi XE и базовых компонентов. Рассмотрены вопросы программирования графики, мультимедиа, разработки программ работы с базами данных Microsoft Access. Многочисленные примеры демонстрируют назначение компонентов, раскрывают тонкости программирования в Delphi. В приложении приведено описание базовых компонентов и наиболее часто используемых функций. Книга отличается доступностью изложения, большим количеством примеров. Прилагаемый компакт-диск содержит проекты, приведенные в книге.  Для начинающих программистов      УДК 681.3.068+800.92Delphi XE  ББК 32.973.26-018.1    Группа подготовки издания:
     
             Главный редактор 	Екатерина Кондукова
             Зам. главного редактора 	Игорь Шишигин
             Зав. редакцией 	Григорий Добин
             Редактор 	Анна Кузьмина
     Компьютерная верстка 	Натальи Смирновой
     Корректор 	Наталия Першакова
     Дизайн серии 	Инны Тачиной
     Оформление обложки 	Елены Беляевой
     Зав. производством 	Николай Тверских
           Ëèöåíçèÿ ÈÄ ¹ 02429 îò 24.07.00. Ïîäïèñàíî â ïå÷àòü 31.01.11.  Ôîðìàò 70×1001/16.  Ïå÷àòü îôñåòíàÿ. Óñë. ïå÷. ë. 33,54. Òèðàæ 1500 ýêç. Çàêàç ¹      "ÁÕÂ-Ïåòåðáóðã", 190005, Ñàíêò-Ïåòåðáóðã, Èçìàéëîâñêèé ïð., 29.  Ñàíèòàðíî-ýïèäåìèîëîãè÷åñêîå çàêëþ÷åíèå íà ïðîäóêöèþ ¹ 77.99.60.953.Ä.005770.05.09 îò 26.05.2009 ã. âûäàíî Ôåäåðàëüíîé ñëóæáîé ïî íàäçîðó   â ñôåðå çàùèòû ïðàâ ïîòðåáèòåëåé è áëàãîïîëó÷èÿ ÷åëîâåêà.  Îòïå÷àòàíî ñ ãîòîâûõ äèàïîçèòèâîâ  â ÃÓÏ "Òèïîãðàôèÿ "Íàóêà"   199034, Ñàíêò-Ïåòåðáóðã, 9 ëèíèÿ, 12          ISBN 978-5-9775-0683-0 	© Культин Н. Б., 2011  © Оформление, издательство "БХВ-Петербург", 2011
     Оглавление        
     ПРЕДИСЛОВИЕ....................................................................................... 1  
     ЧАСТЬ I. DELPHI XE ........................................................................................ 3  
     ГЛАВА 1. СРЕДА РАЗРАБОТКИ DELPHI XE ............................................. 5  
     Установка ....................................................................................................5  
     Первое знакомство ......................................................................................... 6  
     ГЛАВА 2. ПЕРВЫЙ ПРОЕКТ ........................................................................... 11  
     Начало работы ................................................................................................ 11  
     Форма .................................................................................................................. 11  
     Компоненты ....................................................................................................... 16  
     Событие ............................................................................................................. 25  
     Процедура обработки события ......................................................................... 26  
     Редактор кода ..................................................................................................... 30 
     Система подсказок ............................................................................................. 30  
     Шаблоны кода .................................................................................................... 32  
     Справочная информация .................................................................................... 33  
     Сохранение проекта .......................................................................................... 33  
     Структура проекта ............................................................................................. 35  
     Компиляция ........................................................................................................ 38  
     Ошибки .........................................................................................................39  
    Предупреждения и подсказки ............................................................................ 40  
   Запуск программы .............................................................................................. 41  
   Исключения .................................................................................................41  
   Обработка исключения ...................................................................................... 42 
   Внесение изменений ......................................................................................... 46 
   Настройка приложения ..................................................................................... 49  
   Установка приложения на другой компьютер ................................................. 50
       Предисловие.   
Среда разработки Delphi является одним из популярнейших инструментов разработки прикладных программ. Она поддерживает так называемую быструю разработку, основанную на технологии визуального проектирования и событийного программирования, суть которой состоит в том, что среда разработки берет на себя большую часть рутины, оставляя программисту работу по созданию диалоговых окон (визуальное проектирование) и процедур обработки событий (событийное программирование). Производительность программиста при этом просто фантастическая!  Delphi — это среда быстрой разработки приложений (RAD-среда, от Rapid Application Development — быстрая разработка приложений) на языке Delphi, в основе которого лежит хорошо знакомый многим программистам язык Pascal.  Изначально, вплоть до седьмой версии, Delphi была ориентирована на разработку Win32-приложений. После того как Microsoft стала продвигать технологию .NET, появилась Delphi 8 for The Microsoft .NET Framework — среда разработки  .NET-приложений. Следующие версии Delphi выпускались в двух вариантах: для разработки Win32- и .NET-приложений. Теперь программистам стала доступна очередная версия Delphi — Embarcadero Delphi XE. Embarcadero — новое имя выделенного из Borland подразделения (изначально оно называлось CodeGear), отвечающего за инструменты разработки приложений.  Delphi XE существует в трех вариантах: Professional, Enterprise и Architect. Каждый комплект включает набор средств и компонентов, обеспечивающих разработку высокоэффективных приложений различного назначения, в том числе работы с базами данных InterBase, Blackfish SQL, Firebird, MySQL, Microsoft SQL Server, Oracle и др. Чем выше уровень пакета, тем больше возможностей он предоставляет программисту. Так, например, в Enterprise и Architect есть компоненты, позволяющие работать с удаленным сервером Blackfish SQL, а в Professional — только с локальным.  Среда Delphi XE доступна как отдельный инструмент разработки, а также как элемент Embarcadero RAD Studio XE.  Delphi XE может работать в среде операционных систем Microsoft Windows XP Home или Professional (SP2 или SP3), Microsoft Windows Vista SP2, Microsoft Windows Server 2003 (SP1) или 2008, а также в Microsoft Windows 7. Особых требований, по современным меркам, к ресурсам компьютера среда не предъявляет: процессор должен быть класса Intel Pentium (или совместимый) с частотой 1,4 ГГц (рекомендуется 2 ГГц и выше), 1 Гбайт оперативной памяти (рекомендуется  2 Гбайт и больше), 3,75 Гбайт сво
           ЧАСТЬ I   DELPHI XE     
В данной части книги приведено краткое описание среды разработки Delphi XE; на примере программы "Конвертер" показан процесс разработки приложения; приведены описание и примеры использования базовых компонентов.       
 ГЛАВА 1     Среда разработки  Delphi XE.
  Установка  Основным вариантом поставки RAD Studio является "установка с сервера (Download)": при покупке программист получает серийный номер и ссылку на программу активизации установки, а все необходимые для установки файлы загружаются с сервера Embarcadero Technologies. При желании программист может за отдельную плату заказать DVD-диск и в дальнейшем использовать его, например, для установки отсутствующих компонентов.  Чтобы установить Delphi, надо с сайта компании Embarcadero Technologies загрузить пакет установки, представляющий собой ZIP-архив, распаковать его во временный каталог и запустить установщик (файл install_RADStudio.exe).  Delphi XE является .NET-приложением. Поэтому установка начинается с проверки наличия на компьютере разработчика Microsoft .NET Framework 3.5 SP1 Redistributable Package, Microsoft Visual J# version 2.0 Redistributable Package, Micro- soft Data Access Components (MDAC) 2.8, Microsoft Core XML Services (MSXML) 6.0 и Language Pack for Microsoft .NET Framework 2.0. Если какой-либо из перечисленных компонентов отсутствует, то он устанавливается. После этого начинается установка Delphi.  Процесс установки обычный. Сначала на экране появляется окно лицензионного соглашения, затем — окно Select Features, в котором программист может выбрать необходимые для работы компоненты (точнее, отказаться от установки ненужных). По умолчанию на компьютер устанавливаются все доступные  компоненты и, если на жестком диске достаточно свободного места, то в окне Select Features лучше ничего не трогать.  По окончании установки необходимо выполнить активацию продукта — ввести в окне активации серийный номер. Серийный номер передается на сервер регистрации, который в ответ пересылает на компьютер программиста файл активации.  На этом процесс установки можно считать законченным.
       Первое знакомство.
  Чтобы запустить Delphi XE, надо сделать щелчок на кнопке Пуск и в меню Все программы выбрать команду Embarcadero RAD Studio XEDelphi XE.  Затем, чтобы начать работу над новым проектом, надо в меню File выбрать команду NewVCL Forms Application — Delphi.  Окно среды Delphi XE в начале работы над новым проектом приведено на рис. 1.1. В заголовке окна отображается имя проекта, над которым в данный момент работает программист. В верхней части окна находится строка меню и область отображения панелей инструментов.    в начале работы над новым проектом Центральную часть окна среды Delphi XE занимает окно конструктора (дизайнера) формы (рис. 1.2). В нем находится форма — заготовка окна приложения (окно программы во время его разработки принято называть формой).  За окном конструктора формы находится окно редактора кода (рис. 1.3). Доступ к окну редактора кода можно получить, сделав щелчок кнопкой мыши на ярлыке Code или нажав клавишу <F12> (повторное нажатие <F12> или щелчок кнопкой мыши на ярлыке Design активизирует конструктор формы).  
Глава 1. Среда разработки Delphi XE. 	
7   Слева от окна дизайнера формы находится окно Object Inspector (рис. 1.4). Вкладка Properties этого окна используется для редактирования значений свойств объектов. Свойство (property) — это характеристика объекта (формы, командной кнопки, поля редактирования и т. д.). Свойства определяют вид объекта, его положение и поведение. Например, свойство Caption формы определяет текст, который отображается в ее заголовке, а свойства Width и Height — ее размеры (ширину и высоту). Справа от названия свойств указаны их значения. Свойства по функциональному признаку объединены в группы (названия групп выделены цветом). Так, например, свойства, определяющие внешний вид объекта, объединены в группу Visual. Программист может изменить способ отображения свойств, выбрав в контекстном меню вкладки Properties команду Arrangeby Name (В алфавитном порядке) или Arrangeby Category (По категориям). На вкладке Events окна Object Inspector перечислены события, которые может воспринимать объект.      На вкладках палитры компонентов (окно Tool Palette) находятся компоненты (рис. 1.5). Компонент — это элемент пользовательского интерфейса или объект, реализующий некоторую функциональность. Например, на вкладке Standard находятся компоненты, обеспечивающие взаимодействие с пользователем (Lab
       ГЛАВА 2   Первый проект. 
 Процесс разработки программы в Delphi рассмотрим на примере — создадим приложение (так принято называть прикладную программу), с помощью которого можно пересчитать цену из долларов в рубли (рис. 2.1).     Рис. 2.1. Окно программы "Конвертер"  Начало работы  Чтобы начать работу над новым приложением, нужно в меню File выбрать  команду NewVCL Forms Application - Delphi.  Форма  Работа над приложением начинается с создания стартовой формы — главного окна программы.  Сначала нужно установить требуемые значения формы, затем — поместить на форму необходимые компоненты (поля ввода информации, командные кнопки, поля отображения текста и др.).  Настройка формы (а также компонентов) осуществляется путем изменения значений свойств. Свойства объекта (формы, компонента) определяют его вид и поведение. Например, свойство Caption определяет текст заголовка окна, а свойство Position — положение окна в момент появления на экране.  Основные свойства формы (объекта TForm) приведены в табл. 2.1.   Таблица 2.1. Свойства формы (объекта TForm)
     Свойство 	Описание
     Name 	Имя (идентификатор) формы. Используется для доступа к форме, ее свойствам и методам, а также для доступа к компонентам формы
     Caption 	Текст заголовка
     Width 	Ширина формы
     Height 	Высота формы
     Position 	Положение окна в момент первого его появления на экране  (poCenterScreen — в центре экрана; poOwnerFormCenter — в центре родительского окна; poDesigned — положение окна определяют значения свойств Top и Left)
     Top 	Расстояние от верхней границы формы до верхней границы экрана
     Left 	Расстояние от левой границы формы до левой границы экрана
     BorderStyle 	Вид границы. Граница может быть обычной (bsSizeable), тонкой (bsSingle) или вообще отсутствовать (bsNone). Если у окна обычная граница, то во время работы программы пользователь может с помощью мыши изменить размер окна. Изменить размер окна с тонкой границей нельзя. Если граница отсутствует, то на экран во время работы программы будет выведено окно без заголовка. Положение и размер такого окна во время работы программы изменить нельзя
     BorderIcons 	Кнопки управления окном. Значение свойства определяет, какие кнопки управления окном будут доступны пользователю во время работы программы. Значение свойства задается путем присвоения значений уточняющим свойствам biSystemMenu, biMinimaze, biMaximaze и biHelp. Свойство biSystemMenu определяет доступность кнопки системного меню (значок в заголовке окна), biMinimaze — кнопки Свернуть, biMaximaze — кнопки Развернуть, biHelp — кнопки вывода справочной информации
     Icon 	Значок в заголовке диалогового окна, обозначающий кнопку вывода системного меню
     Color 	Цвет фона. Цвет можно задать, указав название цвета или привязку к текущей цветовой схеме операционной системы. Во втором случае цвет определяется текущей цветовой схемой, выбранным компонентом привязки и меняется при изменении цветовой схемы операционной системы
     Таблица 2.1 (окончание)
     Свойство 	Описание
     Font 	Шрифт. Шрифт, используемый по умолчанию компонентами, находящимися на поверхности формы. Изменение свойства Font формы приводит к автоматическому изменению свойства Font компонента, располагающегося на поверхности формы. То есть компоненты наследуют свойство Font от формы (имеется возможность запретить наследование)
       Для изменения значений свойств объектов используется вкладка Properties окна Object Inspector. В левой колонке этой вкладки перечислены свойства объекта, выбранного в данный момент, в правой — указаны значения свойств. Имя выбранного объекта отображается в верхней части окна Object Inspector.  На вкладке Properties свойства объединены в группы по функциональному признаку (названия групп выделены цветом). Например, группа Visual содержит свойства, определяющие вид объекта (для формы — заголовок, цвет фона, вид границы), а группа Layout — свойства, определяющие положение объекта (для формы — координаты левого верхнего угла). Некоторые свойства, например Width и Height, отображаются в нескольких группах (Visual и Layout).  Программист может изменить способ отображения свойств в окне Object Inspector. Например, чтобы свойства отображались в алфавитном порядке, в контекстном меню вкладки Properties надо выбрать команду Arrangeby Name.  Чтобы в заголовке формы вместо Form1 появилось название программы — текст Конвертер, следует изменить значение свойства Caption. Чтобы это сделать, надо в окне Object Inspector щелкнуть левой кнопкой мыши в строке свойства  (в результате будет выделено текущее значение свойства и появится курсор), ввести текст Конвертер и нажать клавишу <Enter> (рис. 2.2).  Аналогичным образом можно установить значения свойств Height и Width, которые определяют высоту и ширину формы. Размер формы, а также размер других компонентов, задают в пикселах (точках). Свойствам Height и Width надо присвоить значения 215 и 366 соответственно.  Размер формы можно изменить и с помощью мыши, точно так же, как и любого окна, т. е. путем перемещения границы. По окончании перемещения границы значения свойств Height и Width будут соответствовать установленному размеру формы.  Положение окна на экране в момент его первого появления соответствует положению формы, заданному во время разработки программы. Положение можно задать, установив значение свойств Top (отступ от верхней границы экрана) и Left (отступ от левой границы экрана) или задав значение свойства Position.  При выборе некоторых свойств, например BorderStyle, справа от текущего значения свойства появляется значок раскрывающегося списка. Очевидно, что значение таких свойств можно задать путем выбора из списка (рис. 2.3).
     Некоторые свойства являются сложными, т. е. их значение определяется совокупностью значений других (уточняющих) свойств. Например, свойство  BorderIcons определяет кнопки управления окном, которые будут доступны во время работы программы. Значения этого свойства определяются совокупностью значений свойств biSystemMenu, biMinimize, biMaximize и biHelp, каждое из которых, в свою очередь, определяет наличие соответствующей командной кнопки в заголовке окна во время работы программы. Перед именами сложных свойств стоит значок "+", в результате щелчка на котором раскрывается список уточняющих свойств (рис. 2.4). Значение уточняющего свойства можно задать обычным образом (ввести значение в поле редактирования или выбрать в списке).  В результате выбора некоторых свойств, например Font, в поле значения свойства отображается кнопка, на которой изображены три точки. Это значит, что задать значение свойства можно в дополнительном диалоговом окне, которое появится в результате щелчка на этой кнопке. Например, значение свойства Font можно задать путем ввода значений уточняющих свойств (Name, Size, Style и др.), а можно воспользоваться стандартным диалоговым окном Шрифт, которое появится в результате щелчка на кнопке с тремя точками (рис. 2.5).  В табл. 2.2 приведены значения свойств стартовой формы программы "Конвертер". Значения остальных свойств формы оставлены без изменения и поэтому в таблице не представлены. Обратите внимание, в именах некоторых свойств есть точка. Это значит, что это значение уточняющего свойства.
     Чтобы задать свойства шрифта, щелкните на кнопке с тремя точками
     Свойство 	Значение 	Комментарий
     Caption 	Конвертер
     Height 	215
     Width 	366
     BorderStyle 	bsSingle 	Тонкая граница формы. Во время работы программы пользователь не сможет изменить размер окна путем захвата и перемещения его границы
     Position 	poDesktopCenter 	Окно программы появится в центре рабочего стола
     BorderIcons. biMaximize 	False 	В заголовке окна не отображать кнопку Развернуть
     Font.Name 	Tahoma
     Font.Size 	10
       После того как будут установлены значения свойств формы, она должна выглядеть так, как показано на рис. 2.6. Теперь на форму надо добавить компоненты.     Рис. 2.6. Форма после изменения значений ее свойств  Компоненты  Поля редактирования, поля отображения текста, командные кнопки, списки, переключатели и другие элементы, обеспечивающие взаимодействие программы с пользователем, называют компонентами пользовательского интерфейса.  Компоненты, которые программист может использовать в процессе разработки программы, находятся в палитре компонентов (Tool Palette). На вкладках Standard, Additional и Win32 располагаются часто используемые компоненты пользовательского интерфейса.  Программа "Конвертер" для пересчета цены из долларов в рубли должна получить от пользователя цену в долларах и курс. Для ввода данных с клавиатуры предназначен компонент Edit. Поэтому на форму разрабатываемого приложения нужно поместить два компонента Edit.  Чтобы на форму добавить компонент Edit, надо:  В палитре компонентов (окно Tool Palette) раскрыть вкладку Standard. Сделать щелчок на значке компонента Edit (рис. 2.7). Здесь следует обратить внимание, что в палитре компонентов, рядом со значком указывается тип компонента, а не его название.  Установить указатель мыши в ту точку формы, в которой должен быть левый верхний угол компонента.  Сделать щелчок левой кнопкой мыши. В результате на форме появляется поле редактирования — компонент Edit  (рис. 2.8).  Каждому добавленному компоненту среда разработки присваивает имя, которое состоит из названия компонента и его порядкового номера. Например, первый компонент Edit получает имя Edit1, второй — Edit2. Программист путем изменения значения свойства Name может поменять имя компонента. Однако в простых программах имена компонентов, как правило, не изменяют .Свойства компонента Edit (объект типа TEdit)
     Свойство 	Описание
     Name 	Имя компонента. Используется для доступа к компоненту и его свойствам
     Text 	Текст, который находится в поле редактирования
     Left 	Расстояние от левой границы компонента до левой границы формы
     Top 	Расстояние от верхней границы компонента до верхней границы формы
     Height 	Высота компонента
     Таблица 2.3 (окончание)
     Свойство 	Описание
     Width 	Ширина компонента
     Font 	Шрифт, используемый для отображения текста в поле компонента
     ParentFont 	Признак наследования шрифта от формы. Если значение свойства равно True, то для отображения текста в поле компонента используется шрифт формы
     MaxLength 	Количество символов, которое можно ввести в поле  редактирования. Если значение свойства равно нулю, ограничения на количество символов нет
     TabOrder 	Определяет порядок перемещения фокуса (курсора) с одного элемента управления на другой в результате нажатия клавиши <Tab>
       На рис. 2.9 приведен вид формы после добавления двух полей редактирования. Один из компонентов выбран (выделен) — помечен маленькими кружками. Свойства выбранного компонента отображаются в окне Object Inspector. Чтобы увидеть и, если надо, изменить свойства другого компонента, нужно этот компонент выбрать — щелкнуть левой кнопкой мыши на изображении компонента или выбрать его имя в раскрывающемся списке, который находится в верхней части окна Object Inspector (рис. 2.10). Компонент, свойства которого надо изменить, можно выбрать и в окне Structure (рис. 2.11).     Рис. 2.9. Форма с двумя компонентами  Значения свойств, определяющих размер и положение компонента на поверхности формы, можно изменить с помощью мыши.  Чтобы изменить положение компонента, необходимо установить курсор мыши на его изображение, нажать левую кнопку мыши и, удерживая ее нажатой, переместить компонент в нужную точку формы. Во время перемещения компонента (рис. 2.12) отображаются текущие значения координат левого верхнего угла компонента (значения свойств Left и Top).
     Отображение значений свойств Left и Тор  при изменении положения компонента  Для того чтобы изменить размер компонента, необходимо сделать щелчок на его изображении (в результате чего компонент будет выделен), установить указатель мыши на один из маркеров, помечающих границу компонента, нажать левую кнопку мыши и, удерживая ее нажатой, изменить положение границы компонента. Во время изменения размера компонента отображаются его текущие размеры: ширина и высота (значения свойств Width и Height) .  В табл. 2.4 приведены значения свойств компонентов Edit1 и Edit2 (прочерк показывает, что значением свойства Text является пустая строка). Значения остальных свойств компонентов Edit оставлены без изменения, и поэтому в таблице не показаны. Компонент Edit1 предназначен для ввода курса, Edit2 — цены. Так как значения свойства Font компонентов Edit не указаны явно, то во время работы программы текст в полях редактирования будет отображаться шрифтом, заданным для формы. Компонент Edit, как и другие компоненты, наследует значение свойства Font от своего родителя — объекта, на поверхности которого он находится. Поэтому если изменить значение свойства Font формы, автоматически изменится значение свойства Font компонентов, находящихся на форме. Если требуется, чтобы текст в поле компонента отображался другим шрифтом, нужно явно задать значение свойства Font этого компонента. Чтобы запретить автоматическое изменение значения свойства Font компонента при изменении свойства Font формы, надо свойству ParentFont компонента присвоить значение False.       Рис. 2.13. Отображение значений свойств Width и Height  при изменении размера компонента Форма программы "Конвертер" после настройки компонентов Edit приведена на рис. 2.14.     Рис. 2.14. Форма после настройки компонентов Edit  Таблица 2.4. Значения свойств компонентов Edit
     Компонент 	Свойство 	Значение
     Edit1 	Top 	64
      	Left 	22
      	Text 	-
      	TabOder 	0
     
     2.4
     Компонент 	Свойство 	Значение
     Edit2 	Top 	52
      	Left 	22
      	Text 	-
      	TabOder 	1
       Отображение текста на поверхности формы обеспечивает компонент Label. В рассматриваемой программе текст отображается слева от полей редактирования (информация о назначении полей ввода). Результат расчета также отображается в окне программы. Поэтому в форму надо добавить три компонента Label (рис. 2.15).  Добавляются компоненты Label на форму точно так же, как и поля редактирования (компонент Edit).
     Свойство 	Описание
     Name 	Имя компонента. Используется для доступа к компоненту
     Caption 	Отображаемый текст
     Основные свойства компонента Label перечислены в табл. 2.5.    Рис. 2.15. Компонент Label — поле отображения текста  Таблица 2.5. Свойства компонента Label  2.5
     Свойство 	Описание
     Font 	Шрифт, используемый для отображения текста
     ParentFont 	Признак наследования характеристик шрифта от объекта (формы), на котором компонент находится
     AutoSize 	Признак автоматического изменения размера компонента при изменении текста, отображаемого в поле компонента
     Left 	Расстояние от левой границы поля вывода до левой границы формы
     Top 	Расстояние от верхней границы поля вывода до верхней границы формы
     Height 	Высота поля вывода
     Width 	Ширина поля вывода
     WordWrap 	Признак того, что слова, которые не помещаются в текущей строке, автоматически переносятся на следующую строку (значение свойства AutoSize должно быть False)
       Если поле компонента Label должно содержать несколько строк текста, то перед тем как изменить значение свойства Caption, сначала надо присвоить свойству  AutoSize значение False, а свойству WordWrap — True. Затем нужно установить требуемый размер компонента (с помощью мыши или вводом значений свойств  Width и Height) и только после этого ввести значение свойства Caption.  На форму разрабатываемого приложения надо добавить три компонента Label. В полях Label1 и Label2 отображается информация о назначении полей ввода, поле Label3 используется для вывода результата расчета. Значения свойств компонентов Label приведены в табл. 2.6.  Таблица 2.6. Значения свойств компонентов Label
     Компонент 	Свойство 	Значение
     Label1 	Left 	20
      	Top 	30
      	Caption 	Курс
     Label2 	Left 	20
      	Top 	60
      	Caption 	Цена
     2.6
     Компонент 	Свойство 	Значение
     Label3 	Left 	16
      	Top 	152
      	AutoSize 	False
      	Width 	297
      	Height 	24
      	Caption 	-
       После настройки компонентов Label форма разрабатываемого приложения должна выглядеть так, как показано на рис. 2.16.     Рис. 2.16. Вид формы после настройки полей отображения текста  Последнее, что надо сделать на этапе создания формы, — добавить на форму две командные кнопки: Пересчет и Завершить. Назначение этих кнопок очевидно. Командная кнопка, компонент Button, добавляется на форму точно так же, как и другие компоненты. Значок компонента Button находится на вкладке Standard (рис. 2.17). Основные свойства компонента Button приведены в табл. 2.7.  Таблица 2.7. Свойства компонента Button
     Свойство 	Описание
     Name 	Имя компонента. Используется для доступа к компоненту и его свойствам
     Caption 	Текст на кнопке
     Enabled 	Признак доступности кнопки. Кнопка доступна (программа реагирует на ее нажатие), если значение свойства равно True, и не доступна, если значение свойства равно False
     2.7
     Свойство 	Описание
     Left 	Расстояние от левой границы кнопки до левой границы формы
     Top 	Расстояние от верхней границы кнопки до верхней границы формы
     Height 	Высота кнопки
     Width 	Ширина кнопки
     TabOrder 	Определяет порядок перемещения фокуса (курсора) с одного элемента управления на другой в результате нажатия клавиши <Tab>
       Рис. 2.17. Командная кнопка — компонент Button    После того как на форму будут добавлены кнопки, нужно выполнить их настройку. Значения свойств компонентов Button приведены в табл. 2.8, окончательный вид формы показан на рис. 2.18.   Таблица 2.8. Значения свойств компонентов Button
     Свойство 	Комп	онент
     	Button1 	Button2
     Left 	16 	110
     Top 	136 	136
     Width 	75 	75
     2.8
     Свойство 	Комп	онент
     	Button1 	Button2
     Height 	25 	25
     Caption 	Пересчет 	Завершить
     
     Событие 	Описание
     Click 	Щелчок кнопкой мыши
     DblClick 	Двойной щелчек кнопкой мыши
        Рис. 2.18. Окончательный вид формы программы "Конвертер"  Завершив работу по созданию формы, можно приступить к программированию — созданию процедур обработки событий.  Событие  Вид созданной формы подсказывает, как работает программа. Очевидно, что пользователь должен ввести в поля редактирования исходные данные и сделать щелчок на кнопке Пересчет. Щелчок на изображении командной кнопки — это пример того, что называется событием.  Событие (event) — это то, что происходит во время работы программы. У каждого события есть имя. Например, щелчок кнопкой мыши — это событие Click, двойной щелчок мышью — событие DblClick.  В табл. 2.9 приведены некоторые события, возникающие в результате действий пользователя.  Таблица 2.9. События
     2.9 (окончание)
     Событие 	Описание
     MouseDown 	Нажатие кнопки мыши
     MouseUp 	Отпускание нажатой кнопки мыши
     MouseMove 	Перемещение указателя мыши
     KeyPress 	Нажатие клавиши клавиатуры
     KeyDown 	Нажатие клавиши клавиатуры. События KeyDown и KeyPress — это чередующиеся, повторяющиеся события, которые происходят до тех пор, пока не будет отпущена удерживаемая клавиша (в этот момент происходит событие KeyUp)
     KeyUp 	Отпускание нажатой клавиши клавиатуры
     Create 	Создание объекта (формы, элемента управления). Процедура обработки этого события обычно используется для инициализации переменных, выполнения подготовительных действий
     Paint 	Событие происходит при появлении окна на экране в начале работы программы, после появления части окна, которая, например, была закрыта другим окном
     Enter 	Получение элементом управления фокуса
     Exit 	Потеря элементом управления фокуса
       Следует понимать, что одни и те же действия, но выполненные над различными объектами, вызывают разные события. Например, щелчок (событие Click) на кнопке Пересчет и щелчок на кнопке Завершить — это два разных события.  Процедура обработки события  Реакцией на событие должно быть какое-либо действие. В Delphi реакция на событие реализуется как процедура обработки события. Таким образом, для того чтобы программа выполняла некоторую работу в ответ на действия пользователя, программист должен написать процедуру обработки соответствующего события.  Методику создания процедуры обработки события рассмотрим на примере обработки события Click, которое возникает в результате щелчка на кнопке Пересчет.  Чтобы приступить к созданию процедуры обработки события, сначала надо выбрать компонент, для которого создается процедура обработки события. Для этого в окне конструктора формы надо сделать щелчок левой кнопкой мыши на нужном компоненте (компонент можно выбрать также в раскрывающемся списке, который находится в верхней части окна Object Inspector). Затем в окне Object Inspector нужно открыть вкладку Events.  В левой колонке вкладки Events (рис. 2.19) перечислены события, которые может воспринимать выбранный компонент. Строго говоря, на вкладке Events указаны не события, а свойства, значением которых являются имена процедур обработки соответствующих событий. Так, например, значением свойства OnClick является имя процедуры обработки события Click.     Рис. 2.19. На вкладке Events перечислены события,  которые может воспринимать компонент Для того чтобы создать процедуру обработки события, нужно на вкладке Evens выбрать событие (сделать щелчок мышью на его имени), ввести имя процедуры обработки события в ставшее доступным поле редактирования (рис. 2.20) и нажать клавишу <Enter>.  В результате этих действий в текст программы (в модуль формы) будет добавлена процедура обработки события и станет доступным окно редактора кода (рис. 2.21), в котором можно набирать инструкции процедуры обработки события. Следует обратить внимание на то, что формируемое средой разработки полное имя процедуры обработки события состоит из двух частей. Первая часть идентифицирует форму, вторая представляет собой непосредственно имя процедуры. Согласно принятому соглашению имя процедуры об
     Сообщение 	Вероятная причина
     Undeclared identifier  (Необъявленный идентификатор) 	Используется переменная, не объявленная в разделе var.  Ошибка при записи имени переменной. Например, в программе объявлена переменная Sum, а в тексте программы написано: Suma
     Unterminated string (Незавершенная строка) 	При записи строковой константы, например сообщения, не поставлена завершающая кавычка
     Таблица 2.10 (окончание)
     Сообщение 	Вероятная причина
     Incompatible types (Несовместимые типы) 	В инструкции присваивания тип выражения не соответствует или не может быть приведен к типу переменной, получающей значение выражения.  Тип фактического параметра процедуры или функции не соответствует или не может быть приведен к типу формального параметра
     Missing operator  or semicolon  (Отсутствует оператор или точка  с запятой) 	После инструкции не поставлена точка с запятой
     Could not create output file (Невозможно создать exe-файл) 	Программа, над которой идет работа, запущена (командой RunRun Without Debugging), поэтому существующий exe-файл нельзя заменить новым
       Следует обратить внимание, что компилятор не всегда может точно локализовать ошибку. Поэтому, анализируя фрагмент кода, который помечен компилятором как содержащий ошибку, надо обращать внимание и на текст, который находится в предыдущих строках.  Предупреждения и подсказки  При обнаружении в программе неточностей, которые не являются ошибками, компилятор выводит подсказки (Hints) и предупреждения (Warnings).  Например, часто выводимой подсказкой является сообщение об объявленной, но не используемой переменной:  Variable ... is declared but never used in ...  Действительно, зачем объявлять переменную и не использовать ее?  В табл. 2.11 приведены предупреждения и подсказки компилятора о типичных неточностях в программе.  Таблица 2.11. Предупреждения и подсказки компилятора
     Сообщение 	Причина
     Variable... is declared but never used in ... 	Переменная объявлена, но не используется
     Variable ... might not have been initialized.  (Вероятно, используется  неинициализированная переменная) 	В программе нет инструкции, которая присваивает переменной начальное значение
     Запуск программы  Пробный запуск программы можно выполнить непосредственно из Delphi, не завершая работу со средой разработки. Для этого в меню Run надо выбрать команду Run или Run Without Debugging. Можно также сделать щелчок на кнопке Run (рис. 2.31) или нажать клавишу <F9>.     Рис. 2.31. Чтобы запустить программу, сделайте щелчок на кнопке Run  Команда Run запускает программу в режиме отладки. Команда Run Without Debugging запускает программу в обычном режиме, даже в том случае, если в ней есть информация, необходимая для отладки (заданы точки останова, указаны переменные, значения которых надо контролировать). Следует обратить внимание, что процесс запуска программы командой Run Without Debugging происходит быстрее.  Исключения  Ошибки, возникающие во время работы программы, называют исключениями. В большинстве случаев причиной исключений являются неверные данные. Например, если в поле Курс программы "Конвертер" ввести строку 30.09 и сделать щелчок на кнопке Пересчет, то на экране появится сообщение (рис. 2.32): '30.09' is not valid floating point value (30.09 не является дробным числом).     Рис. 2.32. Пример сообщения о возникновении ошибки исключения  Причина возникновения исключения описанной ошибки в следующем. Преобразование строки, введенной в поле редактирования, в число выполняет функция StrToFloat. Эта функция работает правильно, если ее параметром является строковое представление дробного числа, что при стандартной для России настройке Windows предполагает использование в качестве десятичного разделителя запятой. В рассматриваемом примере строка 30.09 не является строковым представлением дробного числа, поэтому и возникает исключение.  Если программа запущена из среды разработки в режиме отладки (команда Run из меню Run), то при возникновении исключения выполнение программы приостанавливается и на экране появляется окно Debugger Exception Notification, в котором, помимо сообщения об ошибке, указывается тип исключения (рис. 2.33). Щелчок на кнопке Break приостанавливает выполнение программы в реальном времени и переводит ее в режим выполнения по шагам (при этом в окне редактора кода выделяется инструкция, при выполнении которой произошла ошибка). Щелчок на кнопке Continue запускает программу с той точки, в которой была приостановлена ее работа.     Рис. 2.33. Пример сообщения о возникновении исключен�
     Тип исключения 	Возникает
     EConvertError 	При выполнении преобразования строки в число, если преобразуемая величина не может быть приведена к требуемому виду. Чаще всего возникает при преобразовании строки в дробное число, если в качестве разделителя целой и дробной частей указан неверный символ
     EZeroDivide  	Деление на ноль. При выполнении операции деления, если делитель равен нулю (если и делитель, и делимое равны нулю, то возникает исключение EInvalidOp)
     EFOpenError 	При обращении к файлу, например при попытке загрузить файл иллюстрации с помощью метода LoadFromFile. Наиболее частой причиной является отсутствие требуемого файла или, в случае использования сменного диска, отсутствие диска в накопителе
     EInOutError 	При обращении к файлу, например при попытке открыть для чтения несуществующий файл
     EOLEException 	При выполнении операций с базой данных, например при попытке открыть несуществующую базу данных, если для доступа к базе данных используются ADO-компоненты (чтобы иметь возможность обработки этого исключения, в директиву uses надо добавить ссылку на модуль ComObj)
       В качестве примера использования инструкции try в листинге 2.5 приведена процедура обработки события Click на кнопке Пересчет окна программы "Конвертер". При возникновении исключения EConvertError программа определяет причину (незаполненное поле или неверный формат данных) и выводит соответствующее сообщение (рис. 2.34).  Листинг 2.5. Щелчок на кнопке Пересчет (c обработкой исключения)  procedure TForm1.Button1Click(Sender: TObject); var    usd: real;   // цена в долларах    k:   real;   // курс   rub: real;   // цена в рублях   begin   try      // получить данные из полей редактирования     k := StrToFloat(Edit1.Text);     usd := StrToFloat(Edit2.Text);        // пересчитать цену из долларов в рубли     rub := usd * k;      // вывести результат расчета в поле Label4      Label3.Caption := FloatToStr(usd) + '$ = ' +                       FloatToStr(rub) + 'руб.';   except      if (Length(Edit1.Text) = 0) or (Length(Edit2.Text)=0) then         MessageDlg('Надо ввести данные в оба поля',                     mtWarning,[mbOk],0)     else          MessageDlg('При вводе дробных чисел используйте запятую',                     mtError,[mbOk],0);   end; end;     Рис. 2.34. Пример сообщения об ошибке (диалог MessageDlg)  В приведенной процедуре обработки события Click для вывода сообщения о неверных данных используется функция MessageDld, инструкция вызова которой в общем виде выглядит так: r := MessageDlg(Сообщение, Тип, Кнопки, РазделСправки) где:  Сообщение — текст сообщения;  Тип — тип сообщения. Сообщение может быть информационным (mtInformation), предупреждающим (mtWarning) или сообщением об ошибке (mtError). Каждому типу сообщения соответствует значок (табл. 2.13);  Кнопки — список кнопок, отображаемых в окне сообщения (табл. 2.14);  РазделСправки — идентификатор раздела справочной информации, который появится на экране, если пользователь нажмет клавишу <F1>. Если вывод справки не предусмотрен, то в качестве параметра следует указать ноль.  Значение, возвращаемое функцией MessageDlg (табл. 2.15), позволяет определить, какая кнопка была нажата пользователем для завершения диалога. Если в окне сообщения отображается одна кнопка (очевидно, что в этом случае не нужно проверять, какую кнопку нажал пользователь), то функцию MessageDld можно вызвать как процедуру.  Таблица 2.13. Сообщения
     Сообщение 	Тип сообщения  	Значок
     Warning (Внимание) 	mtWarning
     Error (Ошибка) 	mtError
     Information (Информация) 	mtInformation
     Confirmation (Подтверждение) 	mtConfirmation
       Таблица 2.14. Идентификаторы кнопок
     Идентификатор 	Кнопка
     mbYes 	Yes
     mbNo 	No
     mbOK 	OK
     mbCancel 	Cancel
     mbHelp 	Help
       Таблица 2.15. Значения функции MessageDlg
     Значение 	Диалог завершен нажатием кнопки
     mrYes 	Yes
     mrOk 	Ok
     mrNo 	No
     mrCancel 	Cancel
     Для вывода сообщения вместо функции MessageDlg можно использовать процедуру ShowMessage. Эта процедура выводит окно с сообщением и кнопкой OK. На рис. 2.35 приведен пример окна сообщения — результат выполнения инструкции ShowMessage('Надо ввести данные в оба поля').     Рис. 2.35. Сообщение, выведенное процедурой ShowMessage  Обратите внимание, что в заголовке окна отображается имя приложения, указанное на вкладке Application окна Project Options (окно становится доступным в результате выбора в меню Project команды Options) или, если имя приложения не задано, имя проекта.  Внесение изменений  Программу "Конвертер" можно усовершенствовать. Например, сделать так, чтобы в поля редактирования пользователь мог ввести только правильную информацию, и чтобы в результате нажатия клавиши <Enter> в поле Курс курсор переходил в поле Цена, а при нажатии этой же клавиши в поле Цена становилась активной кнопка Пересчет. Можно сделать так, чтобы кнопка Пересчет была доступной только в том случае, если данные есть в обоих полях редактирования.  Чтобы внести изменения в программу, нужно открыть соответствующий проект. Сделать это можно обычным способом, выбрав в меню File команду Open Project. Можно выбрать нужный проект из списка проектов, над которыми в последнее время работал программист. Этот список становится доступным в результате выбора в меню File команды Reopen.  Чтобы программа "Конвертер" работала так, как было описано ранее, надо создать процедуры обработки событий KeyPress и Change для полей редактирования (компонентов Edit1 и Edit2). Процедура обработки события KeyPress (для каждого компонента своя) обеспечивает фильтрацию вводимых пользователем символов. Она проверяет символ нажатой клавиши (символ передается в процедуру обработки события через параметр Key) и, если символ "запрещен", заменяет его на так называемый нуль-символ (в результате запрещенный символ в поле редактирования не отображается). Процедура обработки события Change (событие возникает, если текст, находящийся в поле редактирования, изменился, например в результате нажатия какой-либо клавиши в поле редактирования) управляет доступностью кнопки Пересчет. Она проверяет, есть ли данные в полях редактирования, и, если в каком-либо из полей данных нет, присваивает свойству Enabled кнопки Button1 значение False и тем самым делает кнопку 
           OSVersionInfo.dwOSVersionInfoSize := sizeof(TOSVersionInfo);     GetVersionEx(OSVersionInfo);     if OSVersionInfo.dwMajorVersion < 6 then     begin          MessageDlg('Программа требует Windows Vista или выше',                     mtError, [mbOk],0);         Form1.Close;     end end;  end.

