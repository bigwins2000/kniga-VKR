Компиляция 
Процесс преобразования исходной программы в выполняемую называется компиляцией и состоит из двух этапов: непосредственно компиляции и компоновки. На этапе компиляции выполняется перевод исходной программы (модулей) в некоторое внутреннее представление. На этапе компоновки выполняется сборка (построение) программы. 
Процесс компиляции активизируется в результате выбора в меню Project  команды Compile, а также путем запуска программы из среды разработки (команда Run или Run Without Debugging меню Run), если с момента последней компиляции в программу были внесены изменения. Следует обратить внимание, что перед тем как первый раз выполнить компиляцию новой программы, необходимо сохранить проект. 
Процесс и результат компиляции отражаются в окне Compile. Если в программе синтаксических ошибок нет, то по завершении компиляции в поле Compiling отображается слово Done . 
  
Результат компиляции (в программе ошибок нет) 
Если в программе есть ошибки и (или) неточности, то в поле Compiling выводится сообщение There are errors (рис. 2.29) и отображается информация о количестве синтаксических (поле Errors) и семантических (поле Warnings) ошибок, а также о количестве неточностей (поле Hints). Сами же сообщения об ошибках, предупреждения и подсказки отображаются в окне Messages (рис. 2.30). Кроме того, после того как окно Compile будет закрыто, в редакторе кода будет выделена строка, в которой находится первая (от начала файла) обнаруженная ошибка. 
  
 Результат компиляции (в программе есть ошибки) 
 Сообщения об обнаруженных ошибках 
Ошибки 
Компилятор генерирует выполняемую программу (exe-файл) только в том случае, если в исходной программе нет синтаксических ошибок. Если в программе есть ошибки, то программист должен их устранить. Процесс устранения ошибок носит итерационный характер. Обычно сначала устраняются наиболее очевидные ошибки, например объявляются необъявленные переменные. После очередного внесения изменений в текст программы выполняется повторная компиляция. 
В табл. 2.10 приведены сообщения компилятора о типичных ошибках. 
Таблица 2.10. Сообщения компилятора об ошибках 
Сообщение 	Вероятная причина 
Undeclared identifier 
(Необъявленный идентификатор) 	Используется переменная, не объявленная в разделе var. 
Ошибка при записи имени переменной. Например, в программе объявлена переменная Sum, а в тексте программы написано: Suma 
Unterminated string (Незавершенная строка) 	При записи строковой константы, например сообщения, не поставлена завершающая кавычка 
Таблица 2.10 (окончание) 
Сообщение 	Вероятная причина 
Incompatible types (Несовместимые типы) 	В инструкции присваивания тип выражения не соответствует или не может быть приведен к типу переменной, получающей значение выражения. 
Тип фактического параметра процедуры или функции не соответствует или не может быть приведен к типу формального параметра 
Missing operator  or semicolon 
(Отсутствует оператор или точка  с запятой) 	После инструкции не поставлена точка с запятой 
Could not create output file (Невозможно создать exe-файл) 	Программа, над которой идет работа, запущена (командой RunRun Without Debugging), поэтому существующий exe-файл нельзя заменить новым 
 
Следует обратить внимание, что компилятор не всегда может точно локализовать ошибку. Поэтому, анализируя фрагмент кода, который помечен компилятором как содержащий ошибку, надо обращать внимание и на текст, который находится в предыдущих строках. 
Предупреждения и подсказки 
При обнаружении в программе неточностей, которые не являются ошибками, компилятор выводит подсказки (Hints) и предупреждения (Warnings). 
Например, часто выводимой подсказкой является сообщение об объявленной, но не используемой переменной: 
Variable ... is declared but never used in ... 
Действительно, зачем объявлять переменную и не использовать ее? 
В табл. 2.11 приведены предупреждения и подсказки компилятора о типичных неточностях в программе. 
Таблица 2.11. Предупреждения и подсказки компилятора 
Сообщение 	Причина 
Variable... is declared but never used in ... 	Переменная объявлена, но не используется 
Variable ... might not have been initialized. 
(Вероятно, используется 
неинициализированная переменная) 	В программе нет инструкции, которая присваивает переменной начальное значение 
Запуск программы 
Пробный запуск программы можно выполнить непосредственно из Delphi, не завершая работу со средой разработки. Для этого в меню Run надо выбрать команду Run или Run Without Debugging. Можно также сделать щелчок на кнопке Run (рис. 2.31) или нажать клавишу <F9>. 
  
. Чтобы запустить программу, сделайте щелчок на кнопке Run 
Команда Run запускает программу в режиме отладки. Команда Run Without Debugging запускает программу в обычном режиме, даже в том случае, если в ней есть информация, необходимая для отладки (заданы точки останова, указаны переменные, значения которых надо контролировать). Следует обратить внимание, что процесс запуска программы командой Run Without Debugging происходит быстрее. 
